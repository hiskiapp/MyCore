name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
      
    - name: Run unit tests
      run: dotnet test MyCore.UnitTests/MyCore.UnitTests.csproj --no-build --configuration Release --verbosity normal

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --no-restore --configuration Release
      
    - name: Run integration tests
      run: dotnet test MyCore.IntegrationTests/MyCore.IntegrationTests.csproj --no-build --configuration Release --verbosity normal

  api-tests:
    name: API Smoke Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PostgreSQL
        uses: ankane/setup-postgres@v1
        with:
          database: mycoredb

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build API
        run: dotnet build MyCore.Api/MyCore.Api.csproj --no-restore --configuration Release

      - name: Run API in background
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Database=mycoredb;Username=runner;Password="
          ASPNETCORE_URLS: "http://0.0.0.0:5018"
        run: |
          dotnet run --project MyCore.Api/MyCore.Api.csproj --no-build --configuration Release &
          API_PID=$!
          echo "API PID=$API_PID"
          for i in {1..30}; do
            if curl -s http://localhost:5018/pets -o /dev/null; then
              echo "API is up!"
              break
            fi
            echo "Waiting for API..."
            sleep 2
          done
          echo $API_PID > api_pid.txt

      - name: Smoke test GET /pets
        run: curl -v http://localhost:5018/pets

      - name: Verify seeded data
        run: curl -s http://localhost:5018/pets | grep -c '"name":"Doggo"' | grep 1

      - name: Stop API
        if: always()
        run: |
          kill $(cat api_pid.txt)

  api-tests-windows:
    name: API Smoke Tests (Windows)
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PostgreSQL
        uses: ankane/setup-postgres@v1
        with:
          database: mycoredb

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build API
        run: dotnet build MyCore.Api/MyCore.Api.csproj --no-restore --configuration Release

      - name: Run API in background
        shell: pwsh
        env:
          ConnectionStrings__DefaultConnection: "Host=localhost;Database=mycoredb;Username=postgres;Password="
          ASPNETCORE_URLS: "http://0.0.0.0:5018"
        run: |
          $process = Start-Process dotnet -ArgumentList "run --project MyCore.Api/MyCore.Api.csproj --no-build --configuration Release" -PassThru
          $process.Id | Out-File -FilePath api_pid.txt
          Write-Host "API PID: $($process.Id)"
          
          Write-Host "Waiting for API..."
          for ($i = 0; $i -lt 30; $i++) {
            try {
              $res = Invoke-WebRequest -Uri http://localhost:5018/pets -UseBasicParsing -ErrorAction SilentlyContinue
              if ($res.StatusCode -eq 200) {
                Write-Host "API is up!"
                break
              }
            }
            catch { }
            Start-Sleep -s 2
          }

      - name: Smoke test GET /pets
        run: curl -v http://localhost:5018/pets

      - name: Verify seeded data
        shell: pwsh
        run: |
          $content = Invoke-WebRequest -Uri http://localhost:5018/pets | Select-Object -ExpandProperty Content
          $matches = [regex]::Matches($content, '"name":"Doggo"')
          if ($matches.Count -eq 1) {
            Write-Host "Seeded data verified."
          } else {
            Write-Host "Verification failed. Expected 1 match, but found $($matches.Count)."
            exit 1
          }

      - name: Stop API
        if: always()
        shell: pwsh
        run: |
          if (Test-Path api_pid.txt) {
            Stop-Process -Id (Get-Content api_pid.txt) -Force
          }
